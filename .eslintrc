# vim: ft=yaml
# eslint config file
#
# http://eslint.org/docs/rules/
#
# replaces jshint/jscs
#
# 201404: converted from jshint (FS)
---
  env:
    browser: true
    es6: true
    node: true
  ecmaFeatures:
    modules: true
  parserOptions:
    sourceType: "module"
  globals:
    module: true
    chrome: true
    Promise: true
    console: true
    exports: true
  rules:
    # Rules comming from jshint:
    no-bitwise: 2 # Prohibit bitwise operators (&, |, ^, etc.).
    curly: [2, "all"] # require {} for every new block or scope
    eqeqeq: [2, "smart"] # Require triple equals i.e. '===' and '!==' but allow typesafe '=='
    guard-for-in: 2 # Require hasOwnProperty check inside 'for ... in ...'
    wrap-iife: [2, "any"] # Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    no-use-before-define: 2 # Prohibit variable use before definition
    new-cap: 2 # Require capitalization of all constructor functions e.g. `new F()`.
    new-parens: 2 # disallow the omission of parentheses when invoking a contructor with no arguments
    no-caller: 2 # Prohibit use of `arguments.caller` and `arguments.callee`.
    no-empty: 2 # Prohibit use of empty blocks.
    no-new: 2 # No 'new T();' without variable assignment
    no-invalid-regexp: 2 # Disallow Invalid Regular Expressions
    no-undef: 2 # disallow use of undeclared variables unless mentioned in a /*global */ block
    no-shadow: 2 # disallow declaration of variables already declared in the outer scope
    no-global-strict: 0 # allow the "use strict" pragma in the global scope
    no-extra-strict: 0 # allow unnecessary use of "use strict"; when already in strict mode
    strict: 0 # dont require that all functions are run in strict mode
    max-params: [2, 4] # max parameter count for functions = 4
    max-depth: [2, 3] # allow a maximum of 3 levels nesting
    max-nested-callbacks: [2, 3] # specifies the maximum depth callbacks can be nested = 3
    max-statements: [2, 50] # maximum of statements inside a function = 50
    complexity: [2, 5] # specify the maximum cyclomatic complexity allowed in a program
    semi: [2, "always"] # always require semicolons
    no-cond-assign: 2 # disallow assignment in conditional expressions
    no-debugger: 2 # disallow use of debugger
    no-eq-null: 2 # disallow comparisons to null without a type-checking operator
    no-eval: 2 # disallow use of eval()
    no-unused-expressions: 2 # disallow usage of expressions in statement position
    no-iterator: 2 # disallow usage of __iterator__ property
    no-sequences: 2 # disallow use of comma operator
    no-loop-func: 2 # disallow creation of functions within loops
    no-multi-str: 2 # disallow use of multiline strings
    no-fallthrough: 2 # disallow fallthrough of case statements
    no-proto: 2 # disallow usage of __proto__ property
    no-script-url: 2 # disallow use of javascript: urls.

    # Rules only available in eslint:
    no-console: 0 # allow use of console
    no-constant-condition: 2 # disallow use of constant expressions in conditions
    no-dupe-keys: 2 # disallow duplicate keys when creating object literals
    no-empty-character-class: 2 # disallow the use of empty character classes in regular expressions
    no-ex-assign: 2 # disallow assigning to the exception in a catch block
    no-extra-boolean-cast: 2 # disallow double-negation boolean casts in a boolean context
    no-extra-semi: 2 # disallow unnecessary semicolons
    no-func-assign: 2 # disallow overwriting functions written as function declarations
    no-negated-in-lhs: 2 # disallow negation of the left operand of an in expression
    no-obj-calls: 2 # disallow the use of object properties of the global object (Math and JSON) as functions
    no-regex-spaces: 2 # disallow multiple spaces in a regular expression literal
    no-sparse-arrays: 2 # disallow sparse arrays
    no-unreachable: 2 # disallow unreachable statements after a return, throw, continue, or break statement
    use-isnan: 2 # disallow comparisons with the value NaN
    valid-typeof: 2 #Ensure that the results of typeof are compared against a valid string
    eol-last: 0 # Its ok to have  NL at the end of the file

    # Best practises:
    block-scoped-var: 2 #treat var statements as if they were block scoped
    consistent-return: 2 #require return statements to either always or never specify values
    dot-notation: 2 #encourages use of dot notation whenever possible
    no-alert: 2 # disallow the use of alert, confirm, and prompt
    no-div-regex: 2 # disallow division operators explicitly at beginning of regular expression
    no-else-return: 2 # disallow else after a return in an if.
    no-labels: "error" # disallow use of labels for anything other then loops and switches
    no-extend-native: 2 # disallow adding to native types
    no-floating-decimal: 2 # disallow the use of leading or trailing decimal points in numeric literals
    no-implied-eval: 2 # disallow use of eval()-like methods
    no-lone-blocks: 2 # disallow unnecessary nested blocks
    no-native-reassign: 2 # disallow reassignments of native objects
    no-new-func: 2 # disallow use of new operator for Function object
    no-new-wrappers: 2 # disallows creating new instances of String,Number, and Boolean
    no-octal: 2 # disallow use of octal literals
    no-octal-escape: 2 # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    no-redeclare: 2 # disallow declaring the same variable more then once
    no-return-assign: 2 # disallow use of assignment in return statement
    no-self-compare: 2 # disallow comparisons where both sides are exactly the same
    no-warning-comments: 0 # allow usage of configurable warning terms in comments: 0 #e.g. TODO or FIXME
    no-with: 2 # disallow use of the with statement
    yoda: [2, "never"] # disallow Yoda conditions
    radix: 2 #require use of the second argument for parseInt()

    # variables
    no-catch-shadow: 2 # disallow the catch clause parameter name being the same as a variable in the outer scope
    no-delete-var: 0 # allow deletion of variables
    no-label-var: 2 # disallow labels that share a name with a variable
    no-shadow-restricted-names: 2 # disallow shadowing of names such as arguments
    no-undef-init: 2 # disallow use of undefined when initializing variables
    no-unused-vars: 2 # disallow declaration of variables that are not used in the code

    # Style
    indent: [2, 2] # Indention check
    brace-style: [2, "1tbs"] # enforce one true brace style
    camelcase: 2 #require camel case names
    consistent-this: 0 # dont enforces consistent naming when capturing the current execution context (off by default)
    func-names: 0 # dont require function expressions to have a name
    func-style: [2, "expression"] #enforces use of function declarations or expressions
    no-nested-ternary: 2 # disallow nested ternary expressions
    no-array-constructor: 2 # disallow use of the Array constructor
    no-new-object: 2 # disallow use of the Object constructor
    no-spaced-func: 0 # allow space between function identifier and application
    semi-spacing: [2, {"before": false, "after": true}] # disallow space before semicolon
    no-ternary: 0 # allow the use of ternary operators
    no-underscore-dangle: 0 # allow dangling underscores in identifiers
    no-extra-parens: [2, "functions"] # disallow wrapping of none IIFE statements in parents
    quotes: 0 # allow all quote styles
    quote-props: 0 # dont require quotes around object literal property names
    sort-vars: 0 # dont require sorted variables within the same declaration block
    space-in-brackets: 0 #require or disallow spaces between brackets
    space-infix-ops: 2 #require spaces around operators
    keyword-spacing: "error" #require a space after return, throw, and case
    space-unary-ops: [1, { "words": true, "nonwords": false }] #require a space around word operators such as typeof
    one-var: 0 # dont require just one var statement per function
    wrap-regex: 0 # dont require regex literals to be wrapped in parentheses

# Whats missing?
# no "single quote style" rule available
# no indention rule available
